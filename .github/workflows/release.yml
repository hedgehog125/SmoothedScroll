name: Build and Release

on:
  push:
    branches:
      - main

jobs:
  build:
    runs-on: windows-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up Python environment
        uses: actions/setup-python@v4
        with:
          python-version: "3.12.5"

      - name: Install Requirements
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Increase version
        id: version
        shell: pwsh
        run: |
          Write-Host "Checking for the latest tag..."
          $latest_tag = git describe --tags $(git rev-list --tags --max-count=1) 2>$null

          if (-not $latest_tag) {
            Write-Host "No tags found, setting version to 1.0.0."
            $new_version = "1.0.0"
          } else {
            Write-Host "Latest tag: $latest_tag"
            $version_parts = $latest_tag.TrimStart('v').Split('.')
            $major = $version_parts[0]
            $minor = $version_parts[1]
            $patch = [int]$version_parts[2] + 1
            $new_version = "$major.$minor.$patch"
          }

          Write-Host "New version: $new_version"
          echo "version=$new_version" >> $env:GITHUB_ENV

      - name: Build with Nuitka
        run: |
          nuitka --onefile main.py --enable-plugin=tk-inter --jobs=8 --static-libpython=no \
                 --remove-output --standalone --windows-disable-console \
                 --windows-icon-from-ico=./assets/icon.ico --output-filename=SmoothedScroll

      - name: Create tag and push
        run: |
          git config user.name "GitHub Actions"
          git config user.email "actions@github.com"

          git tag "v${{ env.version }}"
          git push origin "v${{ env.version }}"

      - name: Check for existing releases
        id: check_releases
        shell: pwsh
        run: |
          $releases = gh release list
          if (-not $releases) {
            Write-Host "No releases found, creating first release."
            $first_release = $true
          } else {
            Write-Host "Releases found."
            $first_release = $false
          }
          echo "first_release=$first_release" >> $env:GITHUB_ENV

      - name: Create GitHub Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: "v${{ env.version }}"
          release_name: "Release v${{ env.version }}"
          draft: false
          prerelease: false

      - name: Upload binary to release
        uses: actions/upload-release-asset@v1
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./SmoothedScroll.exe
          asset_name: SmoothedScroll.exe
          asset_content_type: application/octet-stream
